name: CI - Build, Test & Docker

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.java'
      - '**/pom.xml'
      - 'Dockerfile'
      - '.github/workflows/*.yml'
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Maven - Build & Test (ms-clientes)
        run: mvn -B -DskipTests=false -pl ms-clientes -am clean verify

      - name: Upload ms-clientes JAR
        uses: actions/upload-artifact@v4
        with:
          name: ms-clientes-jar
          path: ms-clientes/target/*.jar
          if-no-files-found: error

  docker-image:
    runs-on: ubuntu-latest
    needs: build-and-test

    # Mapeamos secrets a env y creamos flags booleans reutilizables
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      HAS_DOCKERHUB: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
      HAS_GHCR: ${{ secrets.GHCR_USERNAME != '' && secrets.GHCR_TOKEN != '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---------- Docker Hub ----------
      - name: Docker login (Docker Hub)
        if: ${{ env.HAS_DOCKERHUB == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Docker metadata (Docker Hub)
        if: ${{ env.HAS_DOCKERHUB == 'true' }}
        id: meta_dh
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/clientes-webapp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push (Docker Hub)
        if: ${{ env.HAS_DOCKERHUB == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta_dh.outputs.tags }}
          labels: ${{ steps.meta_dh.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- GHCR ----------
      - name: Docker login (GHCR)
        if: ${{ env.HAS_GHCR == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USERNAME }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Docker metadata (GHCR)
        if: ${{ env.HAS_GHCR == 'true' }}
        id: meta_ghcr
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/clientes-webapp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push (GHCR)
        if: ${{ env.HAS_GHCR == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta_ghcr.outputs.tags }}
          labels: ${{ steps.meta_ghcr.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- Build local SIN push (por si no hay secrets) ----------
      - name: Build image locally (no push)
        if: ${{ env.HAS_DOCKERHUB != 'true' && env.HAS_GHCR != 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: local/clientes-webapp:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
